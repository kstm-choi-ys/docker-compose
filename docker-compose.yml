version: '2'
services:

  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=password
    ports:
      - '5432:5432'
    volumes:
      # - {your_custom_path}:/var/lib/postgresql/data
      - /Users/choi-ys/volumes/postgresql/data:/var/lib/postgresql/data # mac
      # - /mnt/postgres/data:/var/lib/postgresql/data # windows
    restart: always
    
  # docker run -d -p 1521:1521 -p 81:81 -v {local/dir/path}}:/opt/h2-data -e H2_OPTIONS='-ifNotExists' --name=h2 oscarfonts/h2
  h2:
    container_name: 'h2'
    hostname: 'h2'
    image: oscarfonts/h2
    ports:
      - 81:81
      - 1521:1521
    environment:
      - H2_OPTIONS=-ifNotExists
    volumes:
      - /Users/choi-ys/volumes/h2:/opt/h2-data # mac
      # - /Users/arura/h2:/opt/h2-data # windows
    restart: always
  
    # https://blog.knowledgebox.online/linux/lnx-mysql-with-docker/
  mysql:
    container_name: mysql
    image: mysql
    ports:
      - 3306:3306
    volumes:
      - /Users/choi-ys/volumes/mysql/data:/var/lib/mysql
      - /Users/choi-ys/volumes/mysql/config:/etc/mysql/conf.d
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_USER=mysql
      - MYSQL_USER_PASSWORD=password
    restart: always
    
  redis:
    image: redis
    command: redis-server --port 6379
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root_admin
      MONGO_INITDB_ROOT_PASSWORD: root_admin
    restart: always
    mem_limit: "512m"
    
  elasticsearch:
    image: elasticsearch:7.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=elasticsearch
      - cluster.name=elasticsearch-docker-cluster
#      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
#    volumes:
#      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
#      - 9300:9300
#    networks:
#      - elastic
    restart: always
    mem_limit: "512m"
    
  # https://akageun.github.io/2020/05/01/docker-compose-kafka-cluster-manager.html
  # https://www.programmersought.com/article/64294852475/
  # https://bigdatalab.tistory.com/26
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
      
  # docker exec -it kafka bash
  # cd opt/kafka
  # ./bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic test-topic
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      JMX_PORT: 9093
#      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=9093
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
  # https://www.youtube.com/watch?v=enqqp2ZIEyE
  kafka_manager:
    image: hlebalbau/kafka-manager:stable
    container_name: kafka-manager
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "password"
      KAFKA_MANAGER_AUTH_ENABLED: "true"
      KAFKA_MANAGER_USERNAME: username
      KAFKA_MANAGER_PASSWORD: password
